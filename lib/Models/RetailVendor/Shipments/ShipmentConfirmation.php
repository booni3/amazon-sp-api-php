<?php
/**
 * ShipmentConfirmation
 *
 * PHP version 5
 *
 * @category Class
 * @package  ClouSale\AmazonSellingPartnerAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Amazon Selling Partner API Retail Procurement Shipment Model
 *
 * Provides programmatic access to Vendor for Retail Procurement Shipping data
 *
 * OpenAPI spec version: v1
 * Contact: marketplaceapitest@amazon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Shipments;

use \ArrayAccess;
use \ClouSale\AmazonSellingPartnerAPI\ObjectSerializer;

/**
 * ShipmentConfirmation Class Doc Comment
 *
 * @category Class
 * @package  ClouSale\AmazonSellingPartnerAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShipmentConfirmation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ShipmentConfirmation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'shipment_identifier' => 'string',
'shipment_confirmation_type' => 'string',
'shipment_type' => 'string',
'shipment_structure' => 'string',
'transportation_details' => '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Shipments\TransportationDetails',
'amazon_reference_number' => 'string',
'shipment_confirmation_date' => '\DateTime',
'shipped_date' => '\DateTime',
'estimated_delivery_date' => '\DateTime',
'selling_party' => '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Shipments\PartyIdentification',
'ship_from_party' => '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Shipments\PartyIdentification',
'ship_to_party' => '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Shipments\PartyIdentification',
'shipment_measurements' => '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Shipments\ShipmentMeasurements',
'import_details' => '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Shipments\ImportDetails',
'shipped_items' => '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Shipments\Item[]',
'cartons' => '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Shipments\Carton[]',
'pallets' => '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Shipments\Pallet[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'shipment_identifier' => null,
'shipment_confirmation_type' => null,
'shipment_type' => null,
'shipment_structure' => null,
'transportation_details' => null,
'amazon_reference_number' => null,
'shipment_confirmation_date' => 'date-time',
'shipped_date' => 'date-time',
'estimated_delivery_date' => 'date-time',
'selling_party' => null,
'ship_from_party' => null,
'ship_to_party' => null,
'shipment_measurements' => null,
'import_details' => null,
'shipped_items' => null,
'cartons' => null,
'pallets' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shipment_identifier' => 'shipmentIdentifier',
'shipment_confirmation_type' => 'shipmentConfirmationType',
'shipment_type' => 'shipmentType',
'shipment_structure' => 'shipmentStructure',
'transportation_details' => 'transportationDetails',
'amazon_reference_number' => 'amazonReferenceNumber',
'shipment_confirmation_date' => 'shipmentConfirmationDate',
'shipped_date' => 'shippedDate',
'estimated_delivery_date' => 'estimatedDeliveryDate',
'selling_party' => 'sellingParty',
'ship_from_party' => 'shipFromParty',
'ship_to_party' => 'shipToParty',
'shipment_measurements' => 'shipmentMeasurements',
'import_details' => 'importDetails',
'shipped_items' => 'shippedItems',
'cartons' => 'cartons',
'pallets' => 'pallets'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shipment_identifier' => 'setShipmentIdentifier',
'shipment_confirmation_type' => 'setShipmentConfirmationType',
'shipment_type' => 'setShipmentType',
'shipment_structure' => 'setShipmentStructure',
'transportation_details' => 'setTransportationDetails',
'amazon_reference_number' => 'setAmazonReferenceNumber',
'shipment_confirmation_date' => 'setShipmentConfirmationDate',
'shipped_date' => 'setShippedDate',
'estimated_delivery_date' => 'setEstimatedDeliveryDate',
'selling_party' => 'setSellingParty',
'ship_from_party' => 'setShipFromParty',
'ship_to_party' => 'setShipToParty',
'shipment_measurements' => 'setShipmentMeasurements',
'import_details' => 'setImportDetails',
'shipped_items' => 'setShippedItems',
'cartons' => 'setCartons',
'pallets' => 'setPallets'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shipment_identifier' => 'getShipmentIdentifier',
'shipment_confirmation_type' => 'getShipmentConfirmationType',
'shipment_type' => 'getShipmentType',
'shipment_structure' => 'getShipmentStructure',
'transportation_details' => 'getTransportationDetails',
'amazon_reference_number' => 'getAmazonReferenceNumber',
'shipment_confirmation_date' => 'getShipmentConfirmationDate',
'shipped_date' => 'getShippedDate',
'estimated_delivery_date' => 'getEstimatedDeliveryDate',
'selling_party' => 'getSellingParty',
'ship_from_party' => 'getShipFromParty',
'ship_to_party' => 'getShipToParty',
'shipment_measurements' => 'getShipmentMeasurements',
'import_details' => 'getImportDetails',
'shipped_items' => 'getShippedItems',
'cartons' => 'getCartons',
'pallets' => 'getPallets'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SHIPMENT_CONFIRMATION_TYPE_ORIGINAL = 'Original';
const SHIPMENT_CONFIRMATION_TYPE_REPLACE = 'Replace';
const SHIPMENT_TYPE_TRUCK_LOAD = 'TruckLoad';
const SHIPMENT_TYPE_LESS_THAN_TRUCK_LOAD = 'LessThanTruckLoad';
const SHIPMENT_TYPE_SMALL_PARCEL = 'SmallParcel';
const SHIPMENT_STRUCTURE_PALLETIZED_ASSORTMENT_CASE = 'PalletizedAssortmentCase';
const SHIPMENT_STRUCTURE_LOOSE_ASSORTMENT_CASE = 'LooseAssortmentCase';
const SHIPMENT_STRUCTURE_PALLET_OF_ITEMS = 'PalletOfItems';
const SHIPMENT_STRUCTURE_PALLETIZED_STANDARD_CASE = 'PalletizedStandardCase';
const SHIPMENT_STRUCTURE_LOOSE_STANDARD_CASE = 'LooseStandardCase';
const SHIPMENT_STRUCTURE_MASTER_PALLET = 'MasterPallet';
const SHIPMENT_STRUCTURE_MASTER_CASE = 'MasterCase';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShipmentConfirmationTypeAllowableValues()
    {
        return [
            self::SHIPMENT_CONFIRMATION_TYPE_ORIGINAL,
self::SHIPMENT_CONFIRMATION_TYPE_REPLACE,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShipmentTypeAllowableValues()
    {
        return [
            self::SHIPMENT_TYPE_TRUCK_LOAD,
self::SHIPMENT_TYPE_LESS_THAN_TRUCK_LOAD,
self::SHIPMENT_TYPE_SMALL_PARCEL,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShipmentStructureAllowableValues()
    {
        return [
            self::SHIPMENT_STRUCTURE_PALLETIZED_ASSORTMENT_CASE,
self::SHIPMENT_STRUCTURE_LOOSE_ASSORTMENT_CASE,
self::SHIPMENT_STRUCTURE_PALLET_OF_ITEMS,
self::SHIPMENT_STRUCTURE_PALLETIZED_STANDARD_CASE,
self::SHIPMENT_STRUCTURE_LOOSE_STANDARD_CASE,
self::SHIPMENT_STRUCTURE_MASTER_PALLET,
self::SHIPMENT_STRUCTURE_MASTER_CASE,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['shipment_identifier'] = isset($data['shipment_identifier']) ? $data['shipment_identifier'] : null;
        $this->container['shipment_confirmation_type'] = isset($data['shipment_confirmation_type']) ? $data['shipment_confirmation_type'] : null;
        $this->container['shipment_type'] = isset($data['shipment_type']) ? $data['shipment_type'] : null;
        $this->container['shipment_structure'] = isset($data['shipment_structure']) ? $data['shipment_structure'] : null;
        $this->container['transportation_details'] = isset($data['transportation_details']) ? $data['transportation_details'] : null;
        $this->container['amazon_reference_number'] = isset($data['amazon_reference_number']) ? $data['amazon_reference_number'] : null;
        $this->container['shipment_confirmation_date'] = isset($data['shipment_confirmation_date']) ? $data['shipment_confirmation_date'] : null;
        $this->container['shipped_date'] = isset($data['shipped_date']) ? $data['shipped_date'] : null;
        $this->container['estimated_delivery_date'] = isset($data['estimated_delivery_date']) ? $data['estimated_delivery_date'] : null;
        $this->container['selling_party'] = isset($data['selling_party']) ? $data['selling_party'] : null;
        $this->container['ship_from_party'] = isset($data['ship_from_party']) ? $data['ship_from_party'] : null;
        $this->container['ship_to_party'] = isset($data['ship_to_party']) ? $data['ship_to_party'] : null;
        $this->container['shipment_measurements'] = isset($data['shipment_measurements']) ? $data['shipment_measurements'] : null;
        $this->container['import_details'] = isset($data['import_details']) ? $data['import_details'] : null;
        $this->container['shipped_items'] = isset($data['shipped_items']) ? $data['shipped_items'] : null;
        $this->container['cartons'] = isset($data['cartons']) ? $data['cartons'] : null;
        $this->container['pallets'] = isset($data['pallets']) ? $data['pallets'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['shipment_identifier'] === null) {
            $invalidProperties[] = "'shipment_identifier' can't be null";
        }
        if ($this->container['shipment_confirmation_type'] === null) {
            $invalidProperties[] = "'shipment_confirmation_type' can't be null";
        }
        $allowedValues = $this->getShipmentConfirmationTypeAllowableValues();
        if (!is_null($this->container['shipment_confirmation_type']) && !in_array($this->container['shipment_confirmation_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'shipment_confirmation_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getShipmentTypeAllowableValues();
        if (!is_null($this->container['shipment_type']) && !in_array($this->container['shipment_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'shipment_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getShipmentStructureAllowableValues();
        if (!is_null($this->container['shipment_structure']) && !in_array($this->container['shipment_structure'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'shipment_structure', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['shipment_confirmation_date'] === null) {
            $invalidProperties[] = "'shipment_confirmation_date' can't be null";
        }
        if ($this->container['selling_party'] === null) {
            $invalidProperties[] = "'selling_party' can't be null";
        }
        if ($this->container['ship_from_party'] === null) {
            $invalidProperties[] = "'ship_from_party' can't be null";
        }
        if ($this->container['ship_to_party'] === null) {
            $invalidProperties[] = "'ship_to_party' can't be null";
        }
        if ($this->container['shipped_items'] === null) {
            $invalidProperties[] = "'shipped_items' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shipment_identifier
     *
     * @return string
     */
    public function getShipmentIdentifier()
    {
        return $this->container['shipment_identifier'];
    }

    /**
     * Sets shipment_identifier
     *
     * @param string $shipment_identifier Unique Shipment ID (not used over the last 365 days)
     *
     * @return $this
     */
    public function setShipmentIdentifier($shipment_identifier)
    {
        $this->container['shipment_identifier'] = $shipment_identifier;

        return $this;
    }

    /**
     * Gets shipment_confirmation_type
     *
     * @return string
     */
    public function getShipmentConfirmationType()
    {
        return $this->container['shipment_confirmation_type'];
    }

    /**
     * Sets shipment_confirmation_type
     *
     * @param string $shipment_confirmation_type Indicate if this shipment confirmation message is original or intended to replace an already posted Shipment Confirmation. If replacing an existing Shipment Confirmation message, ensure to send the identical shipmentIdentifier and sellingParty information as in the previous message.
     *
     * @return $this
     */
    public function setShipmentConfirmationType($shipment_confirmation_type)
    {
        $allowedValues = $this->getShipmentConfirmationTypeAllowableValues();
        if (!in_array($shipment_confirmation_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'shipment_confirmation_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shipment_confirmation_type'] = $shipment_confirmation_type;

        return $this;
    }

    /**
     * Gets shipment_type
     *
     * @return string
     */
    public function getShipmentType()
    {
        return $this->container['shipment_type'];
    }

    /**
     * Sets shipment_type
     *
     * @param string $shipment_type Provide the type of shipment
     *
     * @return $this
     */
    public function setShipmentType($shipment_type)
    {
        $allowedValues = $this->getShipmentTypeAllowableValues();
        if (!is_null($shipment_type) && !in_array($shipment_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'shipment_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shipment_type'] = $shipment_type;

        return $this;
    }

    /**
     * Gets shipment_structure
     *
     * @return string
     */
    public function getShipmentStructure()
    {
        return $this->container['shipment_structure'];
    }

    /**
     * Sets shipment_structure
     *
     * @param string $shipment_structure Shipment hierarchical structure  |  Shipment Structure Name   |        Shipment Structure Definition         | |-----------------------|----------------------------------------------| | Palletized Assortment Case | Shipment -> Order -> Pallet/Tare -> Carton/Package -> Item | | Loose Assortment Case  |     Shipment -> Order -> Carton/Package -> Item     | | | | | Pallet of Items  |      Shipment -> Order -> Pallet/Tare -> Item | | Palletized Standard Case | Shipment -> Order -> Pallet/Tare -> Item -> Carton/Package | | Loose Standard Case  |     Shipment  -> Order -> Item -> Carton/Package | | Master Pallet  |     Shipment  -> Pallet/Tare -> Order -> Item | | Master Case  |     Shipment  -> Carton/Package -> Order -> Item |
     *
     * @return $this
     */
    public function setShipmentStructure($shipment_structure)
    {
        $allowedValues = $this->getShipmentStructureAllowableValues();
        if (!is_null($shipment_structure) && !in_array($shipment_structure, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'shipment_structure', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shipment_structure'] = $shipment_structure;

        return $this;
    }

    /**
     * Gets transportation_details
     *
     * @return \ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Shipments\TransportationDetails
     */
    public function getTransportationDetails()
    {
        return $this->container['transportation_details'];
    }

    /**
     * Sets transportation_details
     *
     * @param \ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Shipments\TransportationDetails $transportation_details transportation_details
     *
     * @return $this
     */
    public function setTransportationDetails($transportation_details)
    {
        $this->container['transportation_details'] = $transportation_details;

        return $this;
    }

    /**
     * Gets amazon_reference_number
     *
     * @return string
     */
    public function getAmazonReferenceNumber()
    {
        return $this->container['amazon_reference_number'];
    }

    /**
     * Sets amazon_reference_number
     *
     * @param string $amazon_reference_number The Amazon Reference Number is a unique identifier generated by Amazon for all Collect/WePay shipments when you submit  a routing request. This field is mandatory for Collect/WePay shipments.
     *
     * @return $this
     */
    public function setAmazonReferenceNumber($amazon_reference_number)
    {
        $this->container['amazon_reference_number'] = $amazon_reference_number;

        return $this;
    }

    /**
     * Gets shipment_confirmation_date
     *
     * @return \DateTime
     */
    public function getShipmentConfirmationDate()
    {
        return $this->container['shipment_confirmation_date'];
    }

    /**
     * Sets shipment_confirmation_date
     *
     * @param \DateTime $shipment_confirmation_date Date on which the shipment confirmation was submitted.
     *
     * @return $this
     */
    public function setShipmentConfirmationDate($shipment_confirmation_date)
    {
        $this->container['shipment_confirmation_date'] = $shipment_confirmation_date;

        return $this;
    }

    /**
     * Gets shipped_date
     *
     * @return \DateTime
     */
    public function getShippedDate()
    {
        return $this->container['shipped_date'];
    }

    /**
     * Sets shipped_date
     *
     * @param \DateTime $shipped_date This field indicates the date of the departure of the shipment from vendor’s location. Vendors are requested to send ASNs within 30 minutes of departure from their warehouse/distribution center or at least 6 hours prior to the appointment time at the Amazon destination warehouse, whichever is sooner. Shipped date mentioned in the Shipment Confirmation should not be in the future.
     *
     * @return $this
     */
    public function setShippedDate($shipped_date)
    {
        $this->container['shipped_date'] = $shipped_date;

        return $this;
    }

    /**
     * Gets estimated_delivery_date
     *
     * @return \DateTime
     */
    public function getEstimatedDeliveryDate()
    {
        return $this->container['estimated_delivery_date'];
    }

    /**
     * Sets estimated_delivery_date
     *
     * @param \DateTime $estimated_delivery_date Date on which the shipment is expected to reach buyer's warehouse. It needs to be an estimate based on the average transit time between ship from location and the destination. The exact appointment time will be provided by buyer and is potentially not known when creating the Shipment Confirmation.
     *
     * @return $this
     */
    public function setEstimatedDeliveryDate($estimated_delivery_date)
    {
        $this->container['estimated_delivery_date'] = $estimated_delivery_date;

        return $this;
    }

    /**
     * Gets selling_party
     *
     * @return \ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Shipments\PartyIdentification
     */
    public function getSellingParty()
    {
        return $this->container['selling_party'];
    }

    /**
     * Sets selling_party
     *
     * @param \ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Shipments\PartyIdentification $selling_party selling_party
     *
     * @return $this
     */
    public function setSellingParty($selling_party)
    {
        $this->container['selling_party'] = $selling_party;

        return $this;
    }

    /**
     * Gets ship_from_party
     *
     * @return \ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Shipments\PartyIdentification
     */
    public function getShipFromParty()
    {
        return $this->container['ship_from_party'];
    }

    /**
     * Sets ship_from_party
     *
     * @param \ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Shipments\PartyIdentification $ship_from_party ship_from_party
     *
     * @return $this
     */
    public function setShipFromParty($ship_from_party)
    {
        $this->container['ship_from_party'] = $ship_from_party;

        return $this;
    }

    /**
     * Gets ship_to_party
     *
     * @return \ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Shipments\PartyIdentification
     */
    public function getShipToParty()
    {
        return $this->container['ship_to_party'];
    }

    /**
     * Sets ship_to_party
     *
     * @param \ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Shipments\PartyIdentification $ship_to_party ship_to_party
     *
     * @return $this
     */
    public function setShipToParty($ship_to_party)
    {
        $this->container['ship_to_party'] = $ship_to_party;

        return $this;
    }

    /**
     * Gets shipment_measurements
     *
     * @return \ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Shipments\ShipmentMeasurements
     */
    public function getShipmentMeasurements()
    {
        return $this->container['shipment_measurements'];
    }

    /**
     * Sets shipment_measurements
     *
     * @param \ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Shipments\ShipmentMeasurements $shipment_measurements shipment_measurements
     *
     * @return $this
     */
    public function setShipmentMeasurements($shipment_measurements)
    {
        $this->container['shipment_measurements'] = $shipment_measurements;

        return $this;
    }

    /**
     * Gets import_details
     *
     * @return \ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Shipments\ImportDetails
     */
    public function getImportDetails()
    {
        return $this->container['import_details'];
    }

    /**
     * Sets import_details
     *
     * @param \ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Shipments\ImportDetails $import_details import_details
     *
     * @return $this
     */
    public function setImportDetails($import_details)
    {
        $this->container['import_details'] = $import_details;

        return $this;
    }

    /**
     * Gets shipped_items
     *
     * @return \ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Shipments\Item[]
     */
    public function getShippedItems()
    {
        return $this->container['shipped_items'];
    }

    /**
     * Sets shipped_items
     *
     * @param \ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Shipments\Item[] $shipped_items Provide the details of the items in this shipment. If the any of the item details field is common at a carton or a pallet level, then provide them at the corresponding carton or pallet level.
     *
     * @return $this
     */
    public function setShippedItems($shipped_items)
    {
        $this->container['shipped_items'] = $shipped_items;

        return $this;
    }

    /**
     * Gets cartons
     *
     * @return \ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Shipments\Carton[]
     */
    public function getCartons()
    {
        return $this->container['cartons'];
    }

    /**
     * Sets cartons
     *
     * @param \ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Shipments\Carton[] $cartons Provide the details of the cartons in this shipment.
     *
     * @return $this
     */
    public function setCartons($cartons)
    {
        $this->container['cartons'] = $cartons;

        return $this;
    }

    /**
     * Gets pallets
     *
     * @return \ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Shipments\Pallet[]
     */
    public function getPallets()
    {
        return $this->container['pallets'];
    }

    /**
     * Sets pallets
     *
     * @param \ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Shipments\Pallet[] $pallets Provide the details of the pallets in this shipment.
     *
     * @return $this
     */
    public function setPallets($pallets)
    {
        $this->container['pallets'] = $pallets;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
