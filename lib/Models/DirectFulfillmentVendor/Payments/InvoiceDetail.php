<?php
/**
 * InvoiceDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  ClouSale\AmazonSellingPartnerAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Selling Partner API for Direct Fulfillment Payment
 *
 * Provides programmatic access to Direct Fulfillment Vendor's invoice data.
 *
 * OpenAPI spec version: v1
 * Contact: marketplaceapitest@amazon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ClouSale\AmazonSellingPartnerAPI\Models\DirectFulfillmentVendor\Payments;

use \ArrayAccess;
use \ClouSale\AmazonSellingPartnerAPI\ObjectSerializer;

/**
 * InvoiceDetail Class Doc Comment
 *
 * @category Class
 * @package  ClouSale\AmazonSellingPartnerAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InvoiceDetail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InvoiceDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'invoice_number' => 'string',
'invoice_date' => '\DateTime',
'reference_number' => 'string',
'remit_to_party' => '\ClouSale\AmazonSellingPartnerAPI\Models\DirectFulfillmentVendor\Payments\PartyIdentification',
'ship_from_party' => '\ClouSale\AmazonSellingPartnerAPI\Models\DirectFulfillmentVendor\Payments\PartyIdentification',
'bill_to_party' => '\ClouSale\AmazonSellingPartnerAPI\Models\DirectFulfillmentVendor\Payments\PartyIdentification',
'ship_to_country_code' => 'string',
'payment_terms_code' => 'string',
'invoice_total' => '\ClouSale\AmazonSellingPartnerAPI\Models\DirectFulfillmentVendor\Payments\Money',
'tax_totals' => '\ClouSale\AmazonSellingPartnerAPI\Models\DirectFulfillmentVendor\Payments\TaxDetail[]',
'items' => '\ClouSale\AmazonSellingPartnerAPI\Models\DirectFulfillmentVendor\Payments\InvoiceItem[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'invoice_number' => null,
'invoice_date' => 'date-time',
'reference_number' => null,
'remit_to_party' => null,
'ship_from_party' => null,
'bill_to_party' => null,
'ship_to_country_code' => null,
'payment_terms_code' => null,
'invoice_total' => null,
'tax_totals' => null,
'items' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'invoice_number' => 'invoiceNumber',
'invoice_date' => 'invoiceDate',
'reference_number' => 'referenceNumber',
'remit_to_party' => 'remitToParty',
'ship_from_party' => 'shipFromParty',
'bill_to_party' => 'billToParty',
'ship_to_country_code' => 'shipToCountryCode',
'payment_terms_code' => 'paymentTermsCode',
'invoice_total' => 'invoiceTotal',
'tax_totals' => 'taxTotals',
'items' => 'items'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'invoice_number' => 'setInvoiceNumber',
'invoice_date' => 'setInvoiceDate',
'reference_number' => 'setReferenceNumber',
'remit_to_party' => 'setRemitToParty',
'ship_from_party' => 'setShipFromParty',
'bill_to_party' => 'setBillToParty',
'ship_to_country_code' => 'setShipToCountryCode',
'payment_terms_code' => 'setPaymentTermsCode',
'invoice_total' => 'setInvoiceTotal',
'tax_totals' => 'setTaxTotals',
'items' => 'setItems'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'invoice_number' => 'getInvoiceNumber',
'invoice_date' => 'getInvoiceDate',
'reference_number' => 'getReferenceNumber',
'remit_to_party' => 'getRemitToParty',
'ship_from_party' => 'getShipFromParty',
'bill_to_party' => 'getBillToParty',
'ship_to_country_code' => 'getShipToCountryCode',
'payment_terms_code' => 'getPaymentTermsCode',
'invoice_total' => 'getInvoiceTotal',
'tax_totals' => 'getTaxTotals',
'items' => 'getItems'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['invoice_number'] = isset($data['invoice_number']) ? $data['invoice_number'] : null;
        $this->container['invoice_date'] = isset($data['invoice_date']) ? $data['invoice_date'] : null;
        $this->container['reference_number'] = isset($data['reference_number']) ? $data['reference_number'] : null;
        $this->container['remit_to_party'] = isset($data['remit_to_party']) ? $data['remit_to_party'] : null;
        $this->container['ship_from_party'] = isset($data['ship_from_party']) ? $data['ship_from_party'] : null;
        $this->container['bill_to_party'] = isset($data['bill_to_party']) ? $data['bill_to_party'] : null;
        $this->container['ship_to_country_code'] = isset($data['ship_to_country_code']) ? $data['ship_to_country_code'] : null;
        $this->container['payment_terms_code'] = isset($data['payment_terms_code']) ? $data['payment_terms_code'] : null;
        $this->container['invoice_total'] = isset($data['invoice_total']) ? $data['invoice_total'] : null;
        $this->container['tax_totals'] = isset($data['tax_totals']) ? $data['tax_totals'] : null;
        $this->container['items'] = isset($data['items']) ? $data['items'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['invoice_number'] === null) {
            $invalidProperties[] = "'invoice_number' can't be null";
        }
        if ($this->container['invoice_date'] === null) {
            $invalidProperties[] = "'invoice_date' can't be null";
        }
        if ($this->container['remit_to_party'] === null) {
            $invalidProperties[] = "'remit_to_party' can't be null";
        }
        if ($this->container['ship_from_party'] === null) {
            $invalidProperties[] = "'ship_from_party' can't be null";
        }
        if ($this->container['invoice_total'] === null) {
            $invalidProperties[] = "'invoice_total' can't be null";
        }
        if ($this->container['items'] === null) {
            $invalidProperties[] = "'items' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets invoice_number
     *
     * @return string
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param string $invoice_number The unique invoice number.
     *
     * @return $this
     */
    public function setInvoiceNumber($invoice_number)
    {
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets invoice_date
     *
     * @return \DateTime
     */
    public function getInvoiceDate()
    {
        return $this->container['invoice_date'];
    }

    /**
     * Sets invoice_date
     *
     * @param \DateTime $invoice_date Invoice date.
     *
     * @return $this
     */
    public function setInvoiceDate($invoice_date)
    {
        $this->container['invoice_date'] = $invoice_date;

        return $this;
    }

    /**
     * Gets reference_number
     *
     * @return string
     */
    public function getReferenceNumber()
    {
        return $this->container['reference_number'];
    }

    /**
     * Sets reference_number
     *
     * @param string $reference_number An additional unique reference number used for regulatory or other purposes
     *
     * @return $this
     */
    public function setReferenceNumber($reference_number)
    {
        $this->container['reference_number'] = $reference_number;

        return $this;
    }

    /**
     * Gets remit_to_party
     *
     * @return \ClouSale\AmazonSellingPartnerAPI\Models\DirectFulfillmentVendor\Payments\PartyIdentification
     */
    public function getRemitToParty()
    {
        return $this->container['remit_to_party'];
    }

    /**
     * Sets remit_to_party
     *
     * @param \ClouSale\AmazonSellingPartnerAPI\Models\DirectFulfillmentVendor\Payments\PartyIdentification $remit_to_party remit_to_party
     *
     * @return $this
     */
    public function setRemitToParty($remit_to_party)
    {
        $this->container['remit_to_party'] = $remit_to_party;

        return $this;
    }

    /**
     * Gets ship_from_party
     *
     * @return \ClouSale\AmazonSellingPartnerAPI\Models\DirectFulfillmentVendor\Payments\PartyIdentification
     */
    public function getShipFromParty()
    {
        return $this->container['ship_from_party'];
    }

    /**
     * Sets ship_from_party
     *
     * @param \ClouSale\AmazonSellingPartnerAPI\Models\DirectFulfillmentVendor\Payments\PartyIdentification $ship_from_party ship_from_party
     *
     * @return $this
     */
    public function setShipFromParty($ship_from_party)
    {
        $this->container['ship_from_party'] = $ship_from_party;

        return $this;
    }

    /**
     * Gets bill_to_party
     *
     * @return \ClouSale\AmazonSellingPartnerAPI\Models\DirectFulfillmentVendor\Payments\PartyIdentification
     */
    public function getBillToParty()
    {
        return $this->container['bill_to_party'];
    }

    /**
     * Sets bill_to_party
     *
     * @param \ClouSale\AmazonSellingPartnerAPI\Models\DirectFulfillmentVendor\Payments\PartyIdentification $bill_to_party bill_to_party
     *
     * @return $this
     */
    public function setBillToParty($bill_to_party)
    {
        $this->container['bill_to_party'] = $bill_to_party;

        return $this;
    }

    /**
     * Gets ship_to_country_code
     *
     * @return string
     */
    public function getShipToCountryCode()
    {
        return $this->container['ship_to_country_code'];
    }

    /**
     * Sets ship_to_country_code
     *
     * @param string $ship_to_country_code Ship-to country code.
     *
     * @return $this
     */
    public function setShipToCountryCode($ship_to_country_code)
    {
        $this->container['ship_to_country_code'] = $ship_to_country_code;

        return $this;
    }

    /**
     * Gets payment_terms_code
     *
     * @return string
     */
    public function getPaymentTermsCode()
    {
        return $this->container['payment_terms_code'];
    }

    /**
     * Sets payment_terms_code
     *
     * @param string $payment_terms_code The payment terms for the invoice.
     *
     * @return $this
     */
    public function setPaymentTermsCode($payment_terms_code)
    {
        $this->container['payment_terms_code'] = $payment_terms_code;

        return $this;
    }

    /**
     * Gets invoice_total
     *
     * @return \ClouSale\AmazonSellingPartnerAPI\Models\DirectFulfillmentVendor\Payments\Money
     */
    public function getInvoiceTotal()
    {
        return $this->container['invoice_total'];
    }

    /**
     * Sets invoice_total
     *
     * @param \ClouSale\AmazonSellingPartnerAPI\Models\DirectFulfillmentVendor\Payments\Money $invoice_total invoice_total
     *
     * @return $this
     */
    public function setInvoiceTotal($invoice_total)
    {
        $this->container['invoice_total'] = $invoice_total;

        return $this;
    }

    /**
     * Gets tax_totals
     *
     * @return \ClouSale\AmazonSellingPartnerAPI\Models\DirectFulfillmentVendor\Payments\TaxDetail[]
     */
    public function getTaxTotals()
    {
        return $this->container['tax_totals'];
    }

    /**
     * Sets tax_totals
     *
     * @param \ClouSale\AmazonSellingPartnerAPI\Models\DirectFulfillmentVendor\Payments\TaxDetail[] $tax_totals Individual tax details per line item.
     *
     * @return $this
     */
    public function setTaxTotals($tax_totals)
    {
        $this->container['tax_totals'] = $tax_totals;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \ClouSale\AmazonSellingPartnerAPI\Models\DirectFulfillmentVendor\Payments\InvoiceItem[]
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \ClouSale\AmazonSellingPartnerAPI\Models\DirectFulfillmentVendor\Payments\InvoiceItem[] $items Provides the details of the items in this Invoice.
     *
     * @return $this
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
