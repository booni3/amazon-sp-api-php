<?php
/**
 * VendorOrdersApi
 * PHP version 5
 *
 * @category Class
 * @package  ClouSale\AmazonSellingPartnerAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Selling Partner API Retail Procurement Orders Model
 *
 * Provides programmatic access to Vendor Orders data.
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ClouSale\AmazonSellingPartnerAPI\Api\RetailVendor\Orders;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use ClouSale\AmazonSellingPartnerAPI\ApiException;
use ClouSale\AmazonSellingPartnerAPI\Configuration;
use ClouSale\AmazonSellingPartnerAPI\HeaderSelector;
use ClouSale\AmazonSellingPartnerAPI\ObjectSerializer;

/**
 * VendorOrdersApi Class Doc Comment
 *
 * @category Class
 * @package  ClouSale\AmazonSellingPartnerAPI
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VendorOrdersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    public function __construct(Configuration $config)
    {
        $this->client = new Client();
        $this->config = $config;
        $this->headerSelector = new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getPurchaseOrder
     *
     * @param  string $purchase_order_number Purchase Order Id for which the details needs to be fetched.Formatting Notes: 8-character alpha-numeric code (required)
     *
     * @throws \ClouSale\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\GetPurchaseOrderResponse
     */
    public function getPurchaseOrder($purchase_order_number)
    {
        list($response) = $this->getPurchaseOrderWithHttpInfo($purchase_order_number);
        return $response;
    }

    /**
     * Operation getPurchaseOrderWithHttpInfo
     *
     * @param  string $purchase_order_number Purchase Order Id for which the details needs to be fetched.Formatting Notes: 8-character alpha-numeric code (required)
     *
     * @throws \ClouSale\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\GetPurchaseOrderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPurchaseOrderWithHttpInfo($purchase_order_number)
    {
        $returnType = '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\GetPurchaseOrderResponse';
        $request = $this->getPurchaseOrderRequest($purchase_order_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\GetPurchaseOrderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\GetPurchaseOrderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\GetPurchaseOrderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\GetPurchaseOrderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\GetPurchaseOrderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\GetPurchaseOrderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\GetPurchaseOrderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\GetPurchaseOrderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\GetPurchaseOrderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPurchaseOrderAsync
     *
     *
     *
     * @param  string $purchase_order_number Purchase Order Id for which the details needs to be fetched.Formatting Notes: 8-character alpha-numeric code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPurchaseOrderAsync($purchase_order_number)
    {
        return $this->getPurchaseOrderAsyncWithHttpInfo($purchase_order_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPurchaseOrderAsyncWithHttpInfo
     *
     *
     *
     * @param  string $purchase_order_number Purchase Order Id for which the details needs to be fetched.Formatting Notes: 8-character alpha-numeric code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPurchaseOrderAsyncWithHttpInfo($purchase_order_number)
    {
        $returnType = '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\GetPurchaseOrderResponse';
        $request = $this->getPurchaseOrderRequest($purchase_order_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPurchaseOrder'
     *
     * @param  string $purchase_order_number Purchase Order Id for which the details needs to be fetched.Formatting Notes: 8-character alpha-numeric code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPurchaseOrderRequest($purchase_order_number)
    {
        // verify the required parameter 'purchase_order_number' is set
        if ($purchase_order_number === null || (is_array($purchase_order_number) && count($purchase_order_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order_number when calling getPurchaseOrder'
            );
        }

        $resourcePath = '/vendor/orders/v1/purchaseOrders/{purchaseOrderNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($purchase_order_number !== null) {
            $resourcePath = str_replace(
                '{' . 'purchaseOrderNumber' . '}',
                ObjectSerializer::toPathValue($purchase_order_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPurchaseOrders
     *
     * @param  int $limit The limit to the number of records returned. Default value is 100 records. (optional)
     * @param  \DateTime $created_after Purchase Orders that became available after this time will be included in the result. Date range to search must not be more than 7 days. This field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00 (optional)
     * @param  \DateTime $created_before Purchase Orders that became available before this time will be included in the result. Date range to search must not be more than 7 days. This field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00 (optional)
     * @param  string $sort_order Sort ASC or DESC by purchase order creation date. (optional)
     * @param  string $next_token Used for pagination when there is more purchase orders than the specified result size limit. The token value is returned in the previous API call (optional)
     * @param  string $include_details Default value is &#x27;true&#x27;. If entered as &#x27;true&#x27;, this API will return list of purchase orders with complete details. If entered as &#x27;false&#x27; or not included in filter, then only purchase order numbers are returned. (optional)
     * @param  \DateTime $changed_after Purchase Orders that has changed after this timestamp will be included in the result. Date range to search must not be more than 7 days. This field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00 (optional)
     * @param  \DateTime $changed_before Purchase Orders that has changed before this timestamp will be included in the result. Date range to search must not be more than 7 days. This field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00 (optional)
     * @param  string $po_item_state Current state of PO Item. If value is &#x27;Cancelled&#x27;, this API will return list of purchase orders which has one or more items which were cancelled by Amazon with updated item quantity as zero. If not included in filter, this will return all the POs irrespective of whether PO has cancelled items or not (optional)
     * @param  string $is_po_changed Default value is &#x27;false&#x27;. If entered as &#x27;true&#x27;, this API will return list of purchase orders which were modified after order was placed. Vendors are required to pull the changed PO and fulfill updated PO and not the original one. If entered as &#x27;false&#x27; or not included in filter, this will return all the POs irrespective of whether PO has changed or not (optional)
     * @param  string $purchase_order_state Filter purchase orders based on current purchase order state. If not included in filter, this will return POs for all the states (optional)
     * @param  string $ordering_vendor_code Filter purchase orders for a specific ordering vendor code by providing vendor code here. This value should be same as &#x27;sellingParty.partyId&#x27; in PO. If not included in filter, this will return POs for all the vendor codes exist in the vendor group used to authorize API client application (optional)
     *
     * @throws \ClouSale\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\GetPurchaseOrdersResponse
     */
    public function getPurchaseOrders($limit = null, $created_after = null, $created_before = null, $sort_order = null, $next_token = null, $include_details = null, $changed_after = null, $changed_before = null, $po_item_state = null, $is_po_changed = null, $purchase_order_state = null, $ordering_vendor_code = null)
    {
        list($response) = $this->getPurchaseOrdersWithHttpInfo($limit, $created_after, $created_before, $sort_order, $next_token, $include_details, $changed_after, $changed_before, $po_item_state, $is_po_changed, $purchase_order_state, $ordering_vendor_code);
        return $response;
    }

    /**
     * Operation getPurchaseOrdersWithHttpInfo
     *
     * @param  int $limit The limit to the number of records returned. Default value is 100 records. (optional)
     * @param  \DateTime $created_after Purchase Orders that became available after this time will be included in the result. Date range to search must not be more than 7 days. This field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00 (optional)
     * @param  \DateTime $created_before Purchase Orders that became available before this time will be included in the result. Date range to search must not be more than 7 days. This field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00 (optional)
     * @param  string $sort_order Sort ASC or DESC by purchase order creation date. (optional)
     * @param  string $next_token Used for pagination when there is more purchase orders than the specified result size limit. The token value is returned in the previous API call (optional)
     * @param  string $include_details Default value is &#x27;true&#x27;. If entered as &#x27;true&#x27;, this API will return list of purchase orders with complete details. If entered as &#x27;false&#x27; or not included in filter, then only purchase order numbers are returned. (optional)
     * @param  \DateTime $changed_after Purchase Orders that has changed after this timestamp will be included in the result. Date range to search must not be more than 7 days. This field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00 (optional)
     * @param  \DateTime $changed_before Purchase Orders that has changed before this timestamp will be included in the result. Date range to search must not be more than 7 days. This field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00 (optional)
     * @param  string $po_item_state Current state of PO Item. If value is &#x27;Cancelled&#x27;, this API will return list of purchase orders which has one or more items which were cancelled by Amazon with updated item quantity as zero. If not included in filter, this will return all the POs irrespective of whether PO has cancelled items or not (optional)
     * @param  string $is_po_changed Default value is &#x27;false&#x27;. If entered as &#x27;true&#x27;, this API will return list of purchase orders which were modified after order was placed. Vendors are required to pull the changed PO and fulfill updated PO and not the original one. If entered as &#x27;false&#x27; or not included in filter, this will return all the POs irrespective of whether PO has changed or not (optional)
     * @param  string $purchase_order_state Filter purchase orders based on current purchase order state. If not included in filter, this will return POs for all the states (optional)
     * @param  string $ordering_vendor_code Filter purchase orders for a specific ordering vendor code by providing vendor code here. This value should be same as &#x27;sellingParty.partyId&#x27; in PO. If not included in filter, this will return POs for all the vendor codes exist in the vendor group used to authorize API client application (optional)
     *
     * @throws \ClouSale\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\GetPurchaseOrdersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPurchaseOrdersWithHttpInfo($limit = null, $created_after = null, $created_before = null, $sort_order = null, $next_token = null, $include_details = null, $changed_after = null, $changed_before = null, $po_item_state = null, $is_po_changed = null, $purchase_order_state = null, $ordering_vendor_code = null)
    {
        $returnType = '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\GetPurchaseOrdersResponse';
        $request = $this->getPurchaseOrdersRequest($limit, $created_after, $created_before, $sort_order, $next_token, $include_details, $changed_after, $changed_before, $po_item_state, $is_po_changed, $purchase_order_state, $ordering_vendor_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\GetPurchaseOrdersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\GetPurchaseOrdersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\GetPurchaseOrdersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\GetPurchaseOrdersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\GetPurchaseOrdersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\GetPurchaseOrdersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\GetPurchaseOrdersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\GetPurchaseOrdersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPurchaseOrdersAsync
     *
     *
     *
     * @param  int $limit The limit to the number of records returned. Default value is 100 records. (optional)
     * @param  \DateTime $created_after Purchase Orders that became available after this time will be included in the result. Date range to search must not be more than 7 days. This field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00 (optional)
     * @param  \DateTime $created_before Purchase Orders that became available before this time will be included in the result. Date range to search must not be more than 7 days. This field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00 (optional)
     * @param  string $sort_order Sort ASC or DESC by purchase order creation date. (optional)
     * @param  string $next_token Used for pagination when there is more purchase orders than the specified result size limit. The token value is returned in the previous API call (optional)
     * @param  string $include_details Default value is &#x27;true&#x27;. If entered as &#x27;true&#x27;, this API will return list of purchase orders with complete details. If entered as &#x27;false&#x27; or not included in filter, then only purchase order numbers are returned. (optional)
     * @param  \DateTime $changed_after Purchase Orders that has changed after this timestamp will be included in the result. Date range to search must not be more than 7 days. This field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00 (optional)
     * @param  \DateTime $changed_before Purchase Orders that has changed before this timestamp will be included in the result. Date range to search must not be more than 7 days. This field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00 (optional)
     * @param  string $po_item_state Current state of PO Item. If value is &#x27;Cancelled&#x27;, this API will return list of purchase orders which has one or more items which were cancelled by Amazon with updated item quantity as zero. If not included in filter, this will return all the POs irrespective of whether PO has cancelled items or not (optional)
     * @param  string $is_po_changed Default value is &#x27;false&#x27;. If entered as &#x27;true&#x27;, this API will return list of purchase orders which were modified after order was placed. Vendors are required to pull the changed PO and fulfill updated PO and not the original one. If entered as &#x27;false&#x27; or not included in filter, this will return all the POs irrespective of whether PO has changed or not (optional)
     * @param  string $purchase_order_state Filter purchase orders based on current purchase order state. If not included in filter, this will return POs for all the states (optional)
     * @param  string $ordering_vendor_code Filter purchase orders for a specific ordering vendor code by providing vendor code here. This value should be same as &#x27;sellingParty.partyId&#x27; in PO. If not included in filter, this will return POs for all the vendor codes exist in the vendor group used to authorize API client application (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPurchaseOrdersAsync($limit = null, $created_after = null, $created_before = null, $sort_order = null, $next_token = null, $include_details = null, $changed_after = null, $changed_before = null, $po_item_state = null, $is_po_changed = null, $purchase_order_state = null, $ordering_vendor_code = null)
    {
        return $this->getPurchaseOrdersAsyncWithHttpInfo($limit, $created_after, $created_before, $sort_order, $next_token, $include_details, $changed_after, $changed_before, $po_item_state, $is_po_changed, $purchase_order_state, $ordering_vendor_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPurchaseOrdersAsyncWithHttpInfo
     *
     *
     *
     * @param  int $limit The limit to the number of records returned. Default value is 100 records. (optional)
     * @param  \DateTime $created_after Purchase Orders that became available after this time will be included in the result. Date range to search must not be more than 7 days. This field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00 (optional)
     * @param  \DateTime $created_before Purchase Orders that became available before this time will be included in the result. Date range to search must not be more than 7 days. This field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00 (optional)
     * @param  string $sort_order Sort ASC or DESC by purchase order creation date. (optional)
     * @param  string $next_token Used for pagination when there is more purchase orders than the specified result size limit. The token value is returned in the previous API call (optional)
     * @param  string $include_details Default value is &#x27;true&#x27;. If entered as &#x27;true&#x27;, this API will return list of purchase orders with complete details. If entered as &#x27;false&#x27; or not included in filter, then only purchase order numbers are returned. (optional)
     * @param  \DateTime $changed_after Purchase Orders that has changed after this timestamp will be included in the result. Date range to search must not be more than 7 days. This field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00 (optional)
     * @param  \DateTime $changed_before Purchase Orders that has changed before this timestamp will be included in the result. Date range to search must not be more than 7 days. This field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00 (optional)
     * @param  string $po_item_state Current state of PO Item. If value is &#x27;Cancelled&#x27;, this API will return list of purchase orders which has one or more items which were cancelled by Amazon with updated item quantity as zero. If not included in filter, this will return all the POs irrespective of whether PO has cancelled items or not (optional)
     * @param  string $is_po_changed Default value is &#x27;false&#x27;. If entered as &#x27;true&#x27;, this API will return list of purchase orders which were modified after order was placed. Vendors are required to pull the changed PO and fulfill updated PO and not the original one. If entered as &#x27;false&#x27; or not included in filter, this will return all the POs irrespective of whether PO has changed or not (optional)
     * @param  string $purchase_order_state Filter purchase orders based on current purchase order state. If not included in filter, this will return POs for all the states (optional)
     * @param  string $ordering_vendor_code Filter purchase orders for a specific ordering vendor code by providing vendor code here. This value should be same as &#x27;sellingParty.partyId&#x27; in PO. If not included in filter, this will return POs for all the vendor codes exist in the vendor group used to authorize API client application (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPurchaseOrdersAsyncWithHttpInfo($limit = null, $created_after = null, $created_before = null, $sort_order = null, $next_token = null, $include_details = null, $changed_after = null, $changed_before = null, $po_item_state = null, $is_po_changed = null, $purchase_order_state = null, $ordering_vendor_code = null)
    {
        $returnType = '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\GetPurchaseOrdersResponse';
        $request = $this->getPurchaseOrdersRequest($limit, $created_after, $created_before, $sort_order, $next_token, $include_details, $changed_after, $changed_before, $po_item_state, $is_po_changed, $purchase_order_state, $ordering_vendor_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPurchaseOrders'
     *
     * @param  int $limit The limit to the number of records returned. Default value is 100 records. (optional)
     * @param  \DateTime $created_after Purchase Orders that became available after this time will be included in the result. Date range to search must not be more than 7 days. This field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00 (optional)
     * @param  \DateTime $created_before Purchase Orders that became available before this time will be included in the result. Date range to search must not be more than 7 days. This field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00 (optional)
     * @param  string $sort_order Sort ASC or DESC by purchase order creation date. (optional)
     * @param  string $next_token Used for pagination when there is more purchase orders than the specified result size limit. The token value is returned in the previous API call (optional)
     * @param  string $include_details Default value is &#x27;true&#x27;. If entered as &#x27;true&#x27;, this API will return list of purchase orders with complete details. If entered as &#x27;false&#x27; or not included in filter, then only purchase order numbers are returned. (optional)
     * @param  \DateTime $changed_after Purchase Orders that has changed after this timestamp will be included in the result. Date range to search must not be more than 7 days. This field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00 (optional)
     * @param  \DateTime $changed_before Purchase Orders that has changed before this timestamp will be included in the result. Date range to search must not be more than 7 days. This field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00 (optional)
     * @param  string $po_item_state Current state of PO Item. If value is &#x27;Cancelled&#x27;, this API will return list of purchase orders which has one or more items which were cancelled by Amazon with updated item quantity as zero. If not included in filter, this will return all the POs irrespective of whether PO has cancelled items or not (optional)
     * @param  string $is_po_changed Default value is &#x27;false&#x27;. If entered as &#x27;true&#x27;, this API will return list of purchase orders which were modified after order was placed. Vendors are required to pull the changed PO and fulfill updated PO and not the original one. If entered as &#x27;false&#x27; or not included in filter, this will return all the POs irrespective of whether PO has changed or not (optional)
     * @param  string $purchase_order_state Filter purchase orders based on current purchase order state. If not included in filter, this will return POs for all the states (optional)
     * @param  string $ordering_vendor_code Filter purchase orders for a specific ordering vendor code by providing vendor code here. This value should be same as &#x27;sellingParty.partyId&#x27; in PO. If not included in filter, this will return POs for all the vendor codes exist in the vendor group used to authorize API client application (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPurchaseOrdersRequest($limit = null, $created_after = null, $created_before = null, $sort_order = null, $next_token = null, $include_details = null, $changed_after = null, $changed_before = null, $po_item_state = null, $is_po_changed = null, $purchase_order_state = null, $ordering_vendor_code = null)
    {

        $resourcePath = '/vendor/orders/v1/purchaseOrders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, 'int64');
        }
        // query params
        if ($created_after !== null) {
            $queryParams['createdAfter'] = ObjectSerializer::toQueryValue($created_after, 'date-time');
        }
        // query params
        if ($created_before !== null) {
            $queryParams['createdBefore'] = ObjectSerializer::toQueryValue($created_before, 'date-time');
        }
        // query params
        if ($sort_order !== null) {
            $queryParams['sortOrder'] = ObjectSerializer::toQueryValue($sort_order, null);
        }
        // query params
        if ($next_token !== null) {
            $queryParams['nextToken'] = ObjectSerializer::toQueryValue($next_token, null);
        }
        // query params
        if ($include_details !== null) {
            $queryParams['includeDetails'] = ObjectSerializer::toQueryValue($include_details, 'boolean');
        }
        // query params
        if ($changed_after !== null) {
            $queryParams['changedAfter'] = ObjectSerializer::toQueryValue($changed_after, 'date-time');
        }
        // query params
        if ($changed_before !== null) {
            $queryParams['changedBefore'] = ObjectSerializer::toQueryValue($changed_before, 'date-time');
        }
        // query params
        if ($po_item_state !== null) {
            $queryParams['poItemState'] = ObjectSerializer::toQueryValue($po_item_state, null);
        }
        // query params
        if ($is_po_changed !== null) {
            $queryParams['isPOChanged'] = ObjectSerializer::toQueryValue($is_po_changed, 'boolean');
        }
        // query params
        if ($purchase_order_state !== null) {
            $queryParams['purchaseOrderState'] = ObjectSerializer::toQueryValue($purchase_order_state, null);
        }
        // query params
        if ($ordering_vendor_code !== null) {
            $queryParams['orderingVendorCode'] = ObjectSerializer::toQueryValue($ordering_vendor_code, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'payload']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'payload'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPurchaseOrdersStatus
     *
     * @param  int $limit The limit to the number of records returned. Default value is 100 records. (optional)
     * @param  string $sort_order Sort ASC or DESC by purchase order creation date. (optional)
     * @param  string $next_token Used for pagination when there is more purchase orders than the specified result size limit. (optional)
     * @param  \DateTime $created_after Purchase Orders that became available after this time will be included in the result. Date range to search must not be more than 7 days.This field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00 (optional)
     * @param  \DateTime $created_before Purchase Orders that became available before this time will be included in the result. Date range to search must not be more than 7 days.This field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00 (optional)
     * @param  \DateTime $updated_after Purchase Orders for which last PO update has happened after this timestamp will be included in the result. Date range to search must not be more than 7 days.This field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00 (optional)
     * @param  \DateTime $updated_before Purchase Orders for which last PO update has happened before this timestamp will be included in the result. Date range to search must not be more than 7 days.This field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00 (optional)
     * @param  string $purchase_order_number Provides purchase order status for the specified purchase order number. (optional)
     * @param  string $purchase_order_status Filter purchase orders based on current purchase order status. If not included in filter, this will return POs for all the states. Order Status is &#x27;closed&#x27; when buyer has received all the ordered items of the PO. (optional)
     * @param  string $item_confirmation_status Filter purchase orders based on latest purchase order item status. If not included in filter, this will return POs for all the item states. (optional)
     * @param  string $ordering_vendor_code Filter purchase orders for a specific ordering vendor code by providing vendor code here. This value should be same as &#x27;sellingParty.partyId&#x27; in PO. If not included in filter, this will return POs for all the vendor codes exist in the vendor group used to authorize API client application. (optional)
     * @param  string $ship_to_party_id Filter purchase orders for a specific buyer&#x27;s Fulfillment Center/warehouse by providing ship to location id here. This value should be same as &#x27;shipToParty.partyId&#x27; in PO. If not included in filter, this will return POs for all the buyer&#x27;s warehouses used for vendor group purchase orders. (optional)
     *
     * @throws \ClouSale\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\GetPurchaseOrdersStatusResponse
     */
    public function getPurchaseOrdersStatus($limit = null, $sort_order = null, $next_token = null, $created_after = null, $created_before = null, $updated_after = null, $updated_before = null, $purchase_order_number = null, $purchase_order_status = null, $item_confirmation_status = null, $ordering_vendor_code = null, $ship_to_party_id = null)
    {
        list($response) = $this->getPurchaseOrdersStatusWithHttpInfo($limit, $sort_order, $next_token, $created_after, $created_before, $updated_after, $updated_before, $purchase_order_number, $purchase_order_status, $item_confirmation_status, $ordering_vendor_code, $ship_to_party_id);
        return $response;
    }

    /**
     * Operation getPurchaseOrdersStatusWithHttpInfo
     *
     * @param  int $limit The limit to the number of records returned. Default value is 100 records. (optional)
     * @param  string $sort_order Sort ASC or DESC by purchase order creation date. (optional)
     * @param  string $next_token Used for pagination when there is more purchase orders than the specified result size limit. (optional)
     * @param  \DateTime $created_after Purchase Orders that became available after this time will be included in the result. Date range to search must not be more than 7 days.This field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00 (optional)
     * @param  \DateTime $created_before Purchase Orders that became available before this time will be included in the result. Date range to search must not be more than 7 days.This field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00 (optional)
     * @param  \DateTime $updated_after Purchase Orders for which last PO update has happened after this timestamp will be included in the result. Date range to search must not be more than 7 days.This field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00 (optional)
     * @param  \DateTime $updated_before Purchase Orders for which last PO update has happened before this timestamp will be included in the result. Date range to search must not be more than 7 days.This field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00 (optional)
     * @param  string $purchase_order_number Provides purchase order status for the specified purchase order number. (optional)
     * @param  string $purchase_order_status Filter purchase orders based on current purchase order status. If not included in filter, this will return POs for all the states. Order Status is &#x27;closed&#x27; when buyer has received all the ordered items of the PO. (optional)
     * @param  string $item_confirmation_status Filter purchase orders based on latest purchase order item status. If not included in filter, this will return POs for all the item states. (optional)
     * @param  string $ordering_vendor_code Filter purchase orders for a specific ordering vendor code by providing vendor code here. This value should be same as &#x27;sellingParty.partyId&#x27; in PO. If not included in filter, this will return POs for all the vendor codes exist in the vendor group used to authorize API client application. (optional)
     * @param  string $ship_to_party_id Filter purchase orders for a specific buyer&#x27;s Fulfillment Center/warehouse by providing ship to location id here. This value should be same as &#x27;shipToParty.partyId&#x27; in PO. If not included in filter, this will return POs for all the buyer&#x27;s warehouses used for vendor group purchase orders. (optional)
     *
     * @throws \ClouSale\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\GetPurchaseOrdersStatusResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPurchaseOrdersStatusWithHttpInfo($limit = null, $sort_order = null, $next_token = null, $created_after = null, $created_before = null, $updated_after = null, $updated_before = null, $purchase_order_number = null, $purchase_order_status = null, $item_confirmation_status = null, $ordering_vendor_code = null, $ship_to_party_id = null)
    {
        $returnType = '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\GetPurchaseOrdersStatusResponse';
        $request = $this->getPurchaseOrdersStatusRequest($limit, $sort_order, $next_token, $created_after, $created_before, $updated_after, $updated_before, $purchase_order_number, $purchase_order_status, $item_confirmation_status, $ordering_vendor_code, $ship_to_party_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\GetPurchaseOrdersStatusResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\GetPurchaseOrdersStatusResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\GetPurchaseOrdersStatusResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\GetPurchaseOrdersStatusResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\GetPurchaseOrdersStatusResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\GetPurchaseOrdersStatusResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\GetPurchaseOrdersStatusResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\GetPurchaseOrdersStatusResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPurchaseOrdersStatusAsync
     *
     *
     *
     * @param  int $limit The limit to the number of records returned. Default value is 100 records. (optional)
     * @param  string $sort_order Sort ASC or DESC by purchase order creation date. (optional)
     * @param  string $next_token Used for pagination when there is more purchase orders than the specified result size limit. (optional)
     * @param  \DateTime $created_after Purchase Orders that became available after this time will be included in the result. Date range to search must not be more than 7 days.This field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00 (optional)
     * @param  \DateTime $created_before Purchase Orders that became available before this time will be included in the result. Date range to search must not be more than 7 days.This field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00 (optional)
     * @param  \DateTime $updated_after Purchase Orders for which last PO update has happened after this timestamp will be included in the result. Date range to search must not be more than 7 days.This field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00 (optional)
     * @param  \DateTime $updated_before Purchase Orders for which last PO update has happened before this timestamp will be included in the result. Date range to search must not be more than 7 days.This field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00 (optional)
     * @param  string $purchase_order_number Provides purchase order status for the specified purchase order number. (optional)
     * @param  string $purchase_order_status Filter purchase orders based on current purchase order status. If not included in filter, this will return POs for all the states. Order Status is &#x27;closed&#x27; when buyer has received all the ordered items of the PO. (optional)
     * @param  string $item_confirmation_status Filter purchase orders based on latest purchase order item status. If not included in filter, this will return POs for all the item states. (optional)
     * @param  string $ordering_vendor_code Filter purchase orders for a specific ordering vendor code by providing vendor code here. This value should be same as &#x27;sellingParty.partyId&#x27; in PO. If not included in filter, this will return POs for all the vendor codes exist in the vendor group used to authorize API client application. (optional)
     * @param  string $ship_to_party_id Filter purchase orders for a specific buyer&#x27;s Fulfillment Center/warehouse by providing ship to location id here. This value should be same as &#x27;shipToParty.partyId&#x27; in PO. If not included in filter, this will return POs for all the buyer&#x27;s warehouses used for vendor group purchase orders. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPurchaseOrdersStatusAsync($limit = null, $sort_order = null, $next_token = null, $created_after = null, $created_before = null, $updated_after = null, $updated_before = null, $purchase_order_number = null, $purchase_order_status = null, $item_confirmation_status = null, $ordering_vendor_code = null, $ship_to_party_id = null)
    {
        return $this->getPurchaseOrdersStatusAsyncWithHttpInfo($limit, $sort_order, $next_token, $created_after, $created_before, $updated_after, $updated_before, $purchase_order_number, $purchase_order_status, $item_confirmation_status, $ordering_vendor_code, $ship_to_party_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPurchaseOrdersStatusAsyncWithHttpInfo
     *
     *
     *
     * @param  int $limit The limit to the number of records returned. Default value is 100 records. (optional)
     * @param  string $sort_order Sort ASC or DESC by purchase order creation date. (optional)
     * @param  string $next_token Used for pagination when there is more purchase orders than the specified result size limit. (optional)
     * @param  \DateTime $created_after Purchase Orders that became available after this time will be included in the result. Date range to search must not be more than 7 days.This field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00 (optional)
     * @param  \DateTime $created_before Purchase Orders that became available before this time will be included in the result. Date range to search must not be more than 7 days.This field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00 (optional)
     * @param  \DateTime $updated_after Purchase Orders for which last PO update has happened after this timestamp will be included in the result. Date range to search must not be more than 7 days.This field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00 (optional)
     * @param  \DateTime $updated_before Purchase Orders for which last PO update has happened before this timestamp will be included in the result. Date range to search must not be more than 7 days.This field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00 (optional)
     * @param  string $purchase_order_number Provides purchase order status for the specified purchase order number. (optional)
     * @param  string $purchase_order_status Filter purchase orders based on current purchase order status. If not included in filter, this will return POs for all the states. Order Status is &#x27;closed&#x27; when buyer has received all the ordered items of the PO. (optional)
     * @param  string $item_confirmation_status Filter purchase orders based on latest purchase order item status. If not included in filter, this will return POs for all the item states. (optional)
     * @param  string $ordering_vendor_code Filter purchase orders for a specific ordering vendor code by providing vendor code here. This value should be same as &#x27;sellingParty.partyId&#x27; in PO. If not included in filter, this will return POs for all the vendor codes exist in the vendor group used to authorize API client application. (optional)
     * @param  string $ship_to_party_id Filter purchase orders for a specific buyer&#x27;s Fulfillment Center/warehouse by providing ship to location id here. This value should be same as &#x27;shipToParty.partyId&#x27; in PO. If not included in filter, this will return POs for all the buyer&#x27;s warehouses used for vendor group purchase orders. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPurchaseOrdersStatusAsyncWithHttpInfo($limit = null, $sort_order = null, $next_token = null, $created_after = null, $created_before = null, $updated_after = null, $updated_before = null, $purchase_order_number = null, $purchase_order_status = null, $item_confirmation_status = null, $ordering_vendor_code = null, $ship_to_party_id = null)
    {
        $returnType = '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\GetPurchaseOrdersStatusResponse';
        $request = $this->getPurchaseOrdersStatusRequest($limit, $sort_order, $next_token, $created_after, $created_before, $updated_after, $updated_before, $purchase_order_number, $purchase_order_status, $item_confirmation_status, $ordering_vendor_code, $ship_to_party_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPurchaseOrdersStatus'
     *
     * @param  int $limit The limit to the number of records returned. Default value is 100 records. (optional)
     * @param  string $sort_order Sort ASC or DESC by purchase order creation date. (optional)
     * @param  string $next_token Used for pagination when there is more purchase orders than the specified result size limit. (optional)
     * @param  \DateTime $created_after Purchase Orders that became available after this time will be included in the result. Date range to search must not be more than 7 days.This field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00 (optional)
     * @param  \DateTime $created_before Purchase Orders that became available before this time will be included in the result. Date range to search must not be more than 7 days.This field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00 (optional)
     * @param  \DateTime $updated_after Purchase Orders for which last PO update has happened after this timestamp will be included in the result. Date range to search must not be more than 7 days.This field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00 (optional)
     * @param  \DateTime $updated_before Purchase Orders for which last PO update has happened before this timestamp will be included in the result. Date range to search must not be more than 7 days.This field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00 (optional)
     * @param  string $purchase_order_number Provides purchase order status for the specified purchase order number. (optional)
     * @param  string $purchase_order_status Filter purchase orders based on current purchase order status. If not included in filter, this will return POs for all the states. Order Status is &#x27;closed&#x27; when buyer has received all the ordered items of the PO. (optional)
     * @param  string $item_confirmation_status Filter purchase orders based on latest purchase order item status. If not included in filter, this will return POs for all the item states. (optional)
     * @param  string $ordering_vendor_code Filter purchase orders for a specific ordering vendor code by providing vendor code here. This value should be same as &#x27;sellingParty.partyId&#x27; in PO. If not included in filter, this will return POs for all the vendor codes exist in the vendor group used to authorize API client application. (optional)
     * @param  string $ship_to_party_id Filter purchase orders for a specific buyer&#x27;s Fulfillment Center/warehouse by providing ship to location id here. This value should be same as &#x27;shipToParty.partyId&#x27; in PO. If not included in filter, this will return POs for all the buyer&#x27;s warehouses used for vendor group purchase orders. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPurchaseOrdersStatusRequest($limit = null, $sort_order = null, $next_token = null, $created_after = null, $created_before = null, $updated_after = null, $updated_before = null, $purchase_order_number = null, $purchase_order_status = null, $item_confirmation_status = null, $ordering_vendor_code = null, $ship_to_party_id = null)
    {

        $resourcePath = '/vendor/orders/v1/purchaseOrdersStatus';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, 'int64');
        }
        // query params
        if ($sort_order !== null) {
            $queryParams['sortOrder'] = ObjectSerializer::toQueryValue($sort_order, null);
        }
        // query params
        if ($next_token !== null) {
            $queryParams['nextToken'] = ObjectSerializer::toQueryValue($next_token, null);
        }
        // query params
        if ($created_after !== null) {
            $queryParams['createdAfter'] = ObjectSerializer::toQueryValue($created_after, 'date-time');
        }
        // query params
        if ($created_before !== null) {
            $queryParams['createdBefore'] = ObjectSerializer::toQueryValue($created_before, 'date-time');
        }
        // query params
        if ($updated_after !== null) {
            $queryParams['updatedAfter'] = ObjectSerializer::toQueryValue($updated_after, 'date-time');
        }
        // query params
        if ($updated_before !== null) {
            $queryParams['updatedBefore'] = ObjectSerializer::toQueryValue($updated_before, 'date-time');
        }
        // query params
        if ($purchase_order_number !== null) {
            $queryParams['purchaseOrderNumber'] = ObjectSerializer::toQueryValue($purchase_order_number, null);
        }
        // query params
        if ($purchase_order_status !== null) {
            $queryParams['purchaseOrderStatus'] = ObjectSerializer::toQueryValue($purchase_order_status, null);
        }
        // query params
        if ($item_confirmation_status !== null) {
            $queryParams['itemConfirmationStatus'] = ObjectSerializer::toQueryValue($item_confirmation_status, null);
        }
        // query params
        if ($ordering_vendor_code !== null) {
            $queryParams['orderingVendorCode'] = ObjectSerializer::toQueryValue($ordering_vendor_code, null);
        }
        // query params
        if ($ship_to_party_id !== null) {
            $queryParams['shipToPartyId'] = ObjectSerializer::toQueryValue($ship_to_party_id, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation submitAcknowledgement
     *
     * @param  \ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\SubmitAcknowledgementRequest $body body (required)
     *
     * @throws \ClouSale\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\SubmitAcknowledgementResponse
     */
    public function submitAcknowledgement($body)
    {
        list($response) = $this->submitAcknowledgementWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation submitAcknowledgementWithHttpInfo
     *
     * @param  \ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\SubmitAcknowledgementRequest $body (required)
     *
     * @throws \ClouSale\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\SubmitAcknowledgementResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function submitAcknowledgementWithHttpInfo($body)
    {
        $returnType = '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\SubmitAcknowledgementResponse';
        $request = $this->submitAcknowledgementRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\SubmitAcknowledgementResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\SubmitAcknowledgementResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\SubmitAcknowledgementResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\SubmitAcknowledgementResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\SubmitAcknowledgementResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\SubmitAcknowledgementResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\SubmitAcknowledgementResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\SubmitAcknowledgementResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\SubmitAcknowledgementResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation submitAcknowledgementAsync
     *
     *
     *
     * @param  \ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\SubmitAcknowledgementRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function submitAcknowledgementAsync($body)
    {
        return $this->submitAcknowledgementAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation submitAcknowledgementAsyncWithHttpInfo
     *
     *
     *
     * @param  \ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\SubmitAcknowledgementRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function submitAcknowledgementAsyncWithHttpInfo($body)
    {
        $returnType = '\ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\SubmitAcknowledgementResponse';
        $request = $this->submitAcknowledgementRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'submitAcknowledgement'
     *
     * @param  \ClouSale\AmazonSellingPartnerAPI\Models\RetailVendor\Orders\SubmitAcknowledgementRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function submitAcknowledgementRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling submitAcknowledgement'
            );
        }

        $resourcePath = '/vendor/orders/v1/acknowledgements';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
